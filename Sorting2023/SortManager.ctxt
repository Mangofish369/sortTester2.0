#BlueJ class context
comment0.target=SortManager
comment0.text=\r\n\ Write\ a\ description\ of\ class\ SortManager\ here.\r\n\r\n\ @author\ (your\ name)\r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment10.params=arr\ begin\ end
comment10.target=int[]\ quickSortOpCount(int[],\ int,\ int)
comment11.params=arr\ begin\ end
comment11.target=int\ partitionOpCount(int[],\ int,\ int)
comment12.params=theArray\ report
comment12.target=boolean\ checkResults(int[],\ boolean)
comment2.params=
comment2.target=void\ UI()
comment3.params=fileName
comment3.target=void\ loadData(java.lang.String)
comment4.params=num
comment4.target=int[]\ bubbleSortOpCount(int[])
comment4.text=\r\n\ This\ is\ an\ example\ of\ how\ to\ turn\ a\ sort\ algorithm\r\n\ into\ an\ "opCount"\ method\ -\ it\ uses\ a\ rough\ count\r\n\ of\ overall\ operations\ to\ provide\ some\ interesting\r\n\ information\ -\ it's\ non-scientific,\ but\ when\ you\ compare\r\n\ the\ results\ you\ can\ get\ proportionate\ and\ interesting\r\n\ results.\r\n
comment5.params=num
comment5.target=int[]\ bubbleSort(int[])
comment6.params=array
comment6.target=void\ recursionSort(int[])
comment6.text=\r\n\ My\ own\ sort\ method\ (a\ very\ slow\ bubble\ sort)\r\n
comment7.params=array
comment7.target=int[]\ recursionSortOpCount(int[])
comment8.params=arr\ begin\ end
comment8.target=int[]\ quickSort(int[],\ int,\ int)
comment9.params=arr\ begin\ end
comment9.target=int\ partition(int[],\ int,\ int)
numComments=13
